//
// Country.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Country: Codable, Hashable {

    public var name: CountryName?
    /** Список доменов верхнего уровня для страны. */
    public var tld: [String]?
    /** Двухбуквенный код страны. */
    public var cca2: String?
    /** Трехзначный код страны. */
    public var ccn3: String?
    /** Трехбуквенный код страны. */
    public var cca3: String?
    /** Код страны для спортивных мероприятий. */
    public var cioc: String?
    /** Статус независимости. */
    public var independent: Bool?
    /** Статус страны. */
    public var status: String?
    /** Членство в ООН. */
    public var unMember: Bool?
    public var currencies: [String: CountryCurrenciesValue]?
    /** Столица страны. */
    public var capital: [String]?
    /** Регион. */
    public var region: String?
    /** Субрегион. */
    public var subregion: String?
    public var languages: [String: String]?
    /** Список стран, граничащих с данной страной. */
    public var latlng: [Double]?
    public var borders: [String]?
    /** Население страны. */
    public var population: Int?
    public var flags: CountryFlags?
    public var demonyms: [String: CountryDemonymsValue]?
    /** Площадь страны в квадратных километрах. */
    public var area: Double?
    /** Индекс Джини за конкретный год. */
    public var gini: [String: Double]?
    /** Список часовых поясов. */
    public var timezones: [String]?
    /** Континенты, к которым относится страна. */
    public var continents: [String]?

    public init(name: CountryName? = nil, tld: [String]? = nil, cca2: String? = nil, ccn3: String? = nil, cca3: String? = nil, cioc: String? = nil, independent: Bool? = nil, status: String? = nil, unMember: Bool? = nil, currencies: [String: CountryCurrenciesValue]? = nil, capital: [String]? = nil, region: String? = nil, subregion: String? = nil, languages: [String: String]? = nil, latlng: [Double]? = nil, borders: [String]? = nil, population: Int? = nil, flags: CountryFlags? = nil, demonyms: [String: CountryDemonymsValue]? = nil, area: Double? = nil, gini: [String: Double]? = nil, timezones: [String]? = nil, continents: [String]? = nil) {
        self.name = name
        self.tld = tld
        self.cca2 = cca2
        self.ccn3 = ccn3
        self.cca3 = cca3
        self.cioc = cioc
        self.independent = independent
        self.status = status
        self.unMember = unMember
        self.currencies = currencies
        self.capital = capital
        self.region = region
        self.subregion = subregion
        self.languages = languages
        self.latlng = latlng
        self.borders = borders
        self.population = population
        self.flags = flags
        self.demonyms = demonyms
        self.area = area
        self.gini = gini
        self.timezones = timezones
        self.continents = continents
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case tld
        case cca2
        case ccn3
        case cca3
        case cioc
        case independent
        case status
        case unMember
        case currencies
        case capital
        case region
        case subregion
        case languages
        case latlng
        case borders
        case population
        case flags
        case demonyms
        case area
        case gini
        case timezones
        case continents
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(tld, forKey: .tld)
        try container.encodeIfPresent(cca2, forKey: .cca2)
        try container.encodeIfPresent(ccn3, forKey: .ccn3)
        try container.encodeIfPresent(cca3, forKey: .cca3)
        try container.encodeIfPresent(cioc, forKey: .cioc)
        try container.encodeIfPresent(independent, forKey: .independent)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(unMember, forKey: .unMember)
        try container.encodeIfPresent(currencies, forKey: .currencies)
        try container.encodeIfPresent(capital, forKey: .capital)
        try container.encodeIfPresent(region, forKey: .region)
        try container.encodeIfPresent(subregion, forKey: .subregion)
        try container.encodeIfPresent(languages, forKey: .languages)
        try container.encodeIfPresent(latlng, forKey: .latlng)
        try container.encodeIfPresent(borders, forKey: .borders)
        try container.encodeIfPresent(population, forKey: .population)
        try container.encodeIfPresent(flags, forKey: .flags)
        try container.encodeIfPresent(demonyms, forKey: .demonyms)
        try container.encodeIfPresent(area, forKey: .area)
        try container.encodeIfPresent(gini, forKey: .gini)
        try container.encodeIfPresent(timezones, forKey: .timezones)
        try container.encodeIfPresent(continents, forKey: .continents)
    }
}

